module bram (
    input clk, 
    input [3:0] wrAddr, 
    input [3:0] rdAddr, 
    input wrEn, 
    input rdEn,
    input [7:0] bram_data_in,
    output reg [7:0] bram_data_out
);

    reg [7:0] mem [0:10];

    initial begin
      mem[0] = 8'b10000001;
      mem[1] = 8'b01000010;
      mem[2] = 8'b00100100;
      mem[3] = 8'b00011000;
      mem[4] = 8'b00111100;
      mem[5] = 8'b01111110;
      mem[6] = 8'b00111100;
      mem[7] = 8'b00011000;
      mem[8] = 8'b00100100;
      mem[9] = 8'b01000010;
      mem[10] = 8'b10000001;
    end

    always @(posedge clk) begin
      if (wrEn) 
        mem[wrAddr] <= bram_data_in;
      if (rdEn) 
        bram_data_out <= mem[rdAddr];
    end
    
endmodule


module top (
  input clk, // 10Hz
  input rst,
  input [15:0] switches,
  input btnU,
  input btnD,
  input btnL,
  input btnR,
  input btnM,
  output reg [15:0] leds,
  output reg [7:0] ss3, ss2, ss1, ss0,
  output reg red, green, blue
);

  wire [7:0] bram_data_out;
  
  reg [15:0] ledsNext;
  reg [3:0] rdAddr, rdAddrNext;
  reg [3:0] wrAddr, wrAddrNext;
  reg [7:0] bram_data_in, bram_data_inNext;
  reg wrEn, wrEnNext;
  reg [5:0] cnt, cntNext;
  reg stopReadIncrement;
  reg fillWithZero;
  
  bram bramInst(
    .clk(clk), 
    .wrAddr(wrAddr), 
    .rdAddr(rdAddr), 
    .wrEn(wrEn), 
    .rdEn(1'b1),
    .bram_data_in(bram_data_in),
    .bram_data_out(bram_data_out)
  );

  initial begin
    leds = 0;
    ledsNext = 0;
    rdAddr = 0;
    rdAddrNext = 0;
    wrAddr = 0;
    wrAddrNext = 0;
    bram_data_in = 0;
    bram_data_inNext = 0;
    wrEn = 0;
    wrEnNext = 0;
    cnt = 0;
    cntNext = 0;
    stopReadIncrement = 0;
    
  end
  
  always@(posedge clk) begin
    leds <= ledsNext;
    rdAddr <= rdAddrNext;
    wrAddr <= wrAddrNext;
    bram_data_in <= bram_data_inNext;
    wrEn <= wrEnNext;
    cnt <= cntNext;
  end
  
  always@(*) begin
    ledsNext = leds;
    rdAddrNext = rdAddr;
    wrAddrNext = wrAddr;
    bram_data_inNext = bram_data_in;
    wrEnNext = wrEn;
    cntNext = cnt;
    
    bram_data_inNext = switches[7:0];
    wrAddrNext = switches[15:11];
    wrEnNext = btnM;
    
    //First request 
    if (btnU) begin
      bram_data_inNext = 8'b11101001;
      wrAddrNext = 4'b0000; 
      wrEnNext = 1'b1;      
    end
   
   
    //Second
    if (switches[9]) begin
      stopReadIncrement = 1;
    end else begin
      stopReadIncrement = 0;
    end
    
    //Third
    
    if (btnD) begin
      bram_data_inNext = 8'b00000000;
      wrAddrNext = rdAddrNext; 
      wrEnNext = 1'b1;    
    end
    
    //Fourth
    if (btnR) begin
      bram_data_inNext = 8'b11111111;
      wrAddrNext = rdAddrNext; 
      wrEnNext = 1'b1;         
    end
    
    
    ledsNext = bram_data_out;
    
    
    
     if (cnt == 20 && !stopReadIncrement) begin
      cntNext = 0;
      rdAddrNext = rdAddr + 1;
      if (rdAddr == 10)
        rdAddrNext = 0;
    end else begin
      cntNext = cnt + 1;
    end
    
  end
  
  
  
  
  
endmodule
